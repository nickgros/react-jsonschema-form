"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[953],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},l="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),l=p(n),m=a,u=l["".concat(c,".").concat(m)]||l[m]||f[m]||i;return n?r.createElement(u,o(o({ref:t},d),{},{components:n})):r.createElement(u,o({ref:t},d))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[l]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},659:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={},o="Schema definitions and references",s={unversionedId:"usage/definitions",id:"usage/definitions",title:"Schema definitions and references",description:"This library partially supports inline schema definition dereferencing, which is Barbarian for avoiding to copy and paste commonly used field schemas:",source:"@site/docs/usage/definitions.md",sourceDirName:"usage",slug:"/usage/definitions",permalink:"/react-jsonschema-form/docs/usage/definitions",draft:!1,editUrl:"https://github.com/rjsf-team/react-jsonschema-form/tree/main/packages/docs/docs/usage/definitions.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Arrays",permalink:"/react-jsonschema-form/docs/usage/arrays"},next:{title:"Dependencies",permalink:"/react-jsonschema-form/docs/usage/dependencies"}},c={},p=[],d={toc:p};function l(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"schema-definitions-and-references"},"Schema definitions and references"),(0,a.kt)("p",null,"This library partially supports ",(0,a.kt)("a",{parentName:"p",href:"http://json-schema.org/draft/2019-09/json-schema-core.html#ref"},"inline schema definition dereferencing"),", which is Barbarian for ",(0,a.kt)("em",{parentName:"p"},"avoiding to copy and paste commonly used field schemas"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'import { RJSFSchema } from "@rjsf/utils";\nimport validator from "@rjsf/validator-ajv8";\n\nconst schema: RJSFSchema = {\n  "definitions": {\n    "address": {\n      "type": "object",\n      "properties": {\n        "street_address": { "type": "string" },\n        "city":           { "type": "string" },\n        "state":          { "type": "string" }\n      },\n      "required": ["street_address", "city", "state"]\n    }\n  },\n  "type": "object",\n  "properties": {\n    "billing_address": { "$ref": "#/definitions/address" },\n    "shipping_address": { "$ref": "#/definitions/address" }\n  }\n};\n\nrender((\n  <Form schema={schema} validator={validator} />\n), document.getElementById("app"));\n')),(0,a.kt)("p",null,"Note that this library only supports local definition referencing. The value in the ",(0,a.kt)("inlineCode",{parentName:"p"},"$ref")," keyword should be a ",(0,a.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc6901"},"JSON Pointer")," in URI fragment identifier format."))}l.isMDXComponent=!0}}]);