"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[266],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),m=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=m(e.components);return a.createElement(s.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=m(t),u=r,f=c["".concat(s,".").concat(u)]||c[u]||d[u]||l;return t?a.createElement(f,i(i({ref:n},p),{},{components:t})):a.createElement(f,i({ref:n},p))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=u;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[c]="string"==typeof e?e:r,i[1]=o;for(var m=2;m<l;m++)i[m]=t[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},4611:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>o,toc:()=>m});var a=t(7462),r=(t(7294),t(3905));const l={},i="Single fields",o={unversionedId:"usage/single",id:"usage/single",title:"Single fields",description:"The simplest example of a JSON Schema contains only a single field. The field type is determined by the type parameter.",source:"@site/docs/usage/single.md",sourceDirName:"usage",slug:"/usage/single",permalink:"/react-jsonschema-form/docs/usage/single",draft:!1,editUrl:"https://github.com/rjsf-team/react-jsonschema-form/tree/main/packages/docs/docs/usage/single.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"JSON Schema",permalink:"/react-jsonschema-form/docs/json-schema"},next:{title:"Objects",permalink:"/react-jsonschema-form/docs/usage/objects"}},s={},m=[{value:"Field types",id:"field-types",level:2},{value:"Titles and descriptions",id:"titles-and-descriptions",level:2},{value:"Enumerated values",id:"enumerated-values",level:2},{value:"Custom labels for <code>enum</code> fields",id:"custom-labels-for-enum-fields",level:3},{value:"Disabled attribute for <code>enum</code> fields",id:"disabled-attribute-for-enum-fields",level:3},{value:"Nullable types",id:"nullable-types",level:2}],p={toc:m};function c(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"single-fields"},"Single fields"),(0,r.kt)("p",null,"The simplest example of a JSON Schema contains only a single field. The field type is determined by the ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," parameter."),(0,r.kt)("h2",{id:"field-types"},"Field types"),(0,r.kt)("p",null,"The base field types in JSON Schema include:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"string")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"number")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"integer")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"boolean")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"null"))),(0,r.kt)("p",null,"Here is an example of a string field:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { RJSFSchema } from "@rjsf/utils";\nimport validator from "@rjsf/validator-ajv8";\n\nconst schema: RJSFSchema = {\n  type: "string"\n};\n\nrender((\n  <Form schema={schema} validator={validator} />\n), document.getElementById("app"));\n')),(0,r.kt)("h2",{id:"titles-and-descriptions"},"Titles and descriptions"),(0,r.kt)("p",null,"Fields can have titles and descriptions specified by the ",(0,r.kt)("inlineCode",{parentName:"p"},"title")," keyword in the schema and ",(0,r.kt)("inlineCode",{parentName:"p"},"description")," keyword in the schema, respectively. These two can also be overriden by the ",(0,r.kt)("inlineCode",{parentName:"p"},"ui:title")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"ui:description")," keywords in the uiSchema."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { RJSFSchema } from "@rjsf/utils";\nimport validator from "@rjsf/validator-ajv8";\n\nconst schema: RJSFSchema = {\n  title: "My form",\n  description: "My description",\n  type: "string"\n};\n\nrender((\n  <Form schema={schema} validator={validator} />\n), document.getElementById("app"));\n')),(0,r.kt)("h2",{id:"enumerated-values"},"Enumerated values"),(0,r.kt)("p",null,"All base schema types support the ",(0,r.kt)("inlineCode",{parentName:"p"},"enum")," attribute, which restricts the user to select among a list of options. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { RJSFSchema } from "@rjsf/utils";\nimport validator from "@rjsf/validator-ajv8";\n\nconst schema: RJSFSchema = {\n  type: "string",\n  enum: ["one", "two", "three"]\n};\n\nrender((\n  <Form schema={schema} validator={validator} />\n), document.getElementById("app"));\n')),(0,r.kt)("h3",{id:"custom-labels-for-enum-fields"},"Custom labels for ",(0,r.kt)("inlineCode",{parentName:"h3"},"enum")," fields"),(0,r.kt)("p",null,"JSON Schema supports the following approaches to enumerations using ",(0,r.kt)("inlineCode",{parentName:"p"},"oneOf"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"anyOf"),"; react-jsonschema-form supports it as well."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { RJSFSchema } from "@rjsf/utils";\nimport validator from "@rjsf/validator-ajv8";\n\nconst schema: RJSFSchema = {\n  "type": "number",\n  "anyOf": [\n    {\n      "type": "number",\n      "title": "one",\n      "enum": [\n        1\n      ]\n    },\n    {\n      "type": "number",\n      "title": "two",\n      "enum": [\n        2\n      ]\n    },\n    {\n      "type": "number",\n      "title": "three",\n      "enum": [\n        3\n      ]\n    }\n  ]\n};\n\nrender((\n  <Form schema={schema} validator={validator} />\n), document.getElementById("app"));\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { RJSFSchema } from "@rjsf/utils";\n\nconst schema: RJSFSchema = {\n  "type": "number",\n  "oneOf": [\n    {"const": 1, "title": "one"},\n    {"const": 2, "title": "two"},\n    {"const": 3, "title": "three"}\n  ]\n};\n\nrender((\n  <Form schema={schema} validator={validator} />\n), document.getElementById("app"));\n')),(0,r.kt)("p",null,"In your JSON Schema, you may also specify ",(0,r.kt)("inlineCode",{parentName:"p"},"enumNames"),", a non-standard field which RJSF can use to label an enumeration. ",(0,r.kt)("strong",{parentName:"p"},"This behavior is deprecated and may be removed in a future major release of RJSF.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { RJSFSchema } from "@rjsf/utils";\nimport validator from "@rjsf/validator-ajv8";\n\nconst schema: RJSFSchema = {\n  type: "number",\n  enum: [1, 2, 3],\n  enumNames: ["one", "two", "three"]\n};\nrender((\n  <Form schema={schema} validator={validator} />\n), document.getElementById("app"));\n')),(0,r.kt)("h3",{id:"disabled-attribute-for-enum-fields"},"Disabled attribute for ",(0,r.kt)("inlineCode",{parentName:"h3"},"enum")," fields"),(0,r.kt)("p",null,"To disable an option, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"ui:enumDisabled")," property in the uiSchema."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { RJSFSchema, UiSchema } from "@rjsf/utils";\nimport validator from "@rjsf/validator-ajv8";\n\nconst schema: RJSFSchema = {\n  type: "boolean",\n  enum: [true, false]\n};\n\nconst uiSchema: UiSchema = {\n  "ui:enumDisabled": [true],\n};\n\nrender((\n  <Form schema={schema} uiSchema={uiSchema} validator={validator} />\n), document.getElementById("app"));\n')),(0,r.kt)("h2",{id:"nullable-types"},"Nullable types"),(0,r.kt)("p",null,"JSON Schema supports specifying multiple types in an array; however, react-jsonschema-form only supports a restricted subset of this -- nullable types, in which an element is either a given type or equal to null."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { RJSFSchema } from "@rjsf/utils";\nimport validator from "@rjsf/validator-ajv8";\n\nconst schema: RJSFSchema = {\n  type: ["string", "null"]\n};\n\nrender((\n  <Form schema={schema} validator={validator} />\n), document.getElementById("app"));\n')))}c.isMDXComponent=!0}}]);